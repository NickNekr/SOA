# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import statistics_pb2 as statistics__pb2


class StatisticsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTaskStats = channel.unary_unary(
                '/statistics.StatisticsService/GetTaskStats',
                request_serializer=statistics__pb2.TaskRequest.SerializeToString,
                response_deserializer=statistics__pb2.TaskStatsResponse.FromString,
                )
        self.GetTopTasks = channel.unary_unary(
                '/statistics.StatisticsService/GetTopTasks',
                request_serializer=statistics__pb2.TopTasksRequest.SerializeToString,
                response_deserializer=statistics__pb2.TopTasksResponse.FromString,
                )
        self.GetTopUsers = channel.unary_unary(
                '/statistics.StatisticsService/GetTopUsers',
                request_serializer=statistics__pb2.TopUsersRequest.SerializeToString,
                response_deserializer=statistics__pb2.TopUsersResponse.FromString,
                )


class StatisticsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetTaskStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatisticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTaskStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStats,
                    request_deserializer=statistics__pb2.TaskRequest.FromString,
                    response_serializer=statistics__pb2.TaskStatsResponse.SerializeToString,
            ),
            'GetTopTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopTasks,
                    request_deserializer=statistics__pb2.TopTasksRequest.FromString,
                    response_serializer=statistics__pb2.TopTasksResponse.SerializeToString,
            ),
            'GetTopUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopUsers,
                    request_deserializer=statistics__pb2.TopUsersRequest.FromString,
                    response_serializer=statistics__pb2.TopUsersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'statistics.StatisticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StatisticsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetTaskStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistics.StatisticsService/GetTaskStats',
            statistics__pb2.TaskRequest.SerializeToString,
            statistics__pb2.TaskStatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistics.StatisticsService/GetTopTasks',
            statistics__pb2.TopTasksRequest.SerializeToString,
            statistics__pb2.TopTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/statistics.StatisticsService/GetTopUsers',
            statistics__pb2.TopUsersRequest.SerializeToString,
            statistics__pb2.TopUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
